// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(DotNetFarmaContext))]
    partial class DotNetFarmaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Arl", b =>
                {
                    b.Property<int>("ArlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ArlId");

                    b.ToTable("arl", (string)null);

                    b.HasData(
                        new
                        {
                            ArlId = 1,
                            Direccion = "calle 14 # 24-10",
                            Email = "CajasanAyuda@gmail.com",
                            Nombre = "Cajasan",
                            Telefono = "60793820"
                        },
                        new
                        {
                            ArlId = 2,
                            Direccion = "Calle 10 #30-45",
                            Email = "contacto@saludtotal.com",
                            Nombre = "SaludTotal",
                            Telefono = "601234567"
                        },
                        new
                        {
                            ArlId = 3,
                            Direccion = "Av. 5 #18-22",
                            Email = "info@cafesalud.com",
                            Nombre = "Cafesalud",
                            Telefono = "601112233"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cargo", b =>
                {
                    b.Property<int>("CargoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("CargoId");

                    b.ToTable("Cargos");

                    b.HasData(
                        new
                        {
                            CargoId = 1,
                            Descripcion = "Se encarga de atender en la farmacia",
                            Nombre = "Auxiliar de farmacia"
                        },
                        new
                        {
                            CargoId = 2,
                            Descripcion = "Brinda cuidados médicos a los pacientes",
                            Nombre = "Enfermera"
                        },
                        new
                        {
                            CargoId = 3,
                            Descripcion = "Maneja las finanzas de la empresa",
                            Nombre = "Contador"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.Property<int>("CiudadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CiudadId");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("ciudad", (string)null);

                    b.HasData(
                        new
                        {
                            CiudadId = 1,
                            DepartamentoId = 1,
                            Nombre = "Bucarmanga"
                        },
                        new
                        {
                            CiudadId = 2,
                            DepartamentoId = 2,
                            Nombre = "Lima"
                        },
                        new
                        {
                            CiudadId = 3,
                            DepartamentoId = 3,
                            Nombre = "Buenos Aires"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Compra", b =>
                {
                    b.Property<int>("CompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCompra")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int");

                    b.Property<double>("Precio")
                        .HasColumnType("double");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.HasKey("CompraId");

                    b.HasIndex("MedicamentoId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Compras");

                    b.HasData(
                        new
                        {
                            CompraId = 1,
                            Cantidad = 200,
                            FechaCompra = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicamentoId = 1,
                            Precio = 200000.0,
                            ProveedorId = 1
                        },
                        new
                        {
                            CompraId = 2,
                            Cantidad = 150,
                            FechaCompra = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicamentoId = 2,
                            Precio = 180000.0,
                            ProveedorId = 2
                        },
                        new
                        {
                            CompraId = 3,
                            Cantidad = 100,
                            FechaCompra = new DateTime(2023, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicamentoId = 3,
                            Precio = 150000.0,
                            ProveedorId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.HasKey("DepartamentoId");

                    b.ToTable("departamento", (string)null);

                    b.HasData(
                        new
                        {
                            DepartamentoId = 1,
                            Nombre = "Santander",
                            PaisId = 1
                        },
                        new
                        {
                            DepartamentoId = 2,
                            Nombre = "Lima",
                            PaisId = 2
                        },
                        new
                        {
                            DepartamentoId = 3,
                            Nombre = "Buenos Aires",
                            PaisId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Empleado", b =>
                {
                    b.Property<int>("EmpleadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("ArlId")
                        .HasColumnType("int");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<int>("CiudadId")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("EpsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaContratacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("EmpleadoId");

                    b.HasIndex("ArlId");

                    b.HasIndex("CargoId");

                    b.HasIndex("CiudadId");

                    b.HasIndex("EpsId");

                    b.ToTable("Empleados");

                    b.HasData(
                        new
                        {
                            EmpleadoId = 1,
                            Apellidos = "Escalante",
                            ArlId = 1,
                            CargoId = 1,
                            CiudadId = 1,
                            Direccion = "Cra 33 #48-3",
                            EpsId = 1,
                            FechaContratacion = new DateTime(2011, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombres = "Jorge",
                            Telefono = "3294902231"
                        },
                        new
                        {
                            EmpleadoId = 2,
                            Apellidos = "López",
                            ArlId = 2,
                            CargoId = 2,
                            CiudadId = 2,
                            Direccion = "Cra 18 #45-6",
                            EpsId = 2,
                            FechaContratacion = new DateTime(2015, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombres = "María",
                            Telefono = "3209876543"
                        },
                        new
                        {
                            EmpleadoId = 3,
                            Apellidos = "Perez",
                            ArlId = 3,
                            CargoId = 3,
                            CiudadId = 3,
                            Direccion = "Av. 3 #8-15",
                            EpsId = 3,
                            FechaContratacion = new DateTime(2019, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombres = "Juan",
                            Telefono = "3101234567"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Eps", b =>
                {
                    b.Property<int>("EpsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("EpsId");

                    b.ToTable("eps", (string)null);

                    b.HasData(
                        new
                        {
                            EpsId = 1,
                            Direccion = "Calle 49 #43-2",
                            Email = "AtencionAlCliente@avanzar.co",
                            Nombre = "Avanzar",
                            Telefono = "60783822"
                        },
                        new
                        {
                            EpsId = 2,
                            Direccion = "Cra 15 #22-10",
                            Email = "atencion@coomeva.com",
                            Nombre = "Coomeva",
                            Telefono = "601987654"
                        },
                        new
                        {
                            EpsId = 3,
                            Direccion = "Av. 8 #12-30",
                            Email = "info@famisanar.com",
                            Nombre = "Famisanar",
                            Telefono = "601876543"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Medicamento", b =>
                {
                    b.Property<int>("MedicamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double>("Precio")
                        .HasColumnType("double");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("MedicamentoId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("medicamento", (string)null);

                    b.HasData(
                        new
                        {
                            MedicamentoId = 1,
                            FechaExpiracion = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Paracetamol",
                            Precio = 2500.0,
                            ProveedorId = 1,
                            Stock = 150
                        },
                        new
                        {
                            MedicamentoId = 3,
                            FechaExpiracion = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Aspirina",
                            Precio = 2000.0,
                            ProveedorId = 3,
                            Stock = 75
                        },
                        new
                        {
                            MedicamentoId = 2,
                            FechaExpiracion = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Ibuprofeno",
                            Precio = 3000.0,
                            ProveedorId = 2,
                            Stock = 100
                        });
                });

            modelBuilder.Entity("Domain.Entities.Paciente", b =>
                {
                    b.Property<int>("PacienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("PacienteId");

                    b.ToTable("paciente", (string)null);

                    b.HasData(
                        new
                        {
                            PacienteId = 1,
                            Apellidos = "Alvarez",
                            Direccion = "Cra 19 #8-45 Barrio Comuneros",
                            Nombre = "Sofia",
                            Telefono = "3224243429"
                        },
                        new
                        {
                            PacienteId = 2,
                            Apellidos = "Gomez",
                            Direccion = "Cra 25 #12-34 Barrio Los Pinos",
                            Nombre = "Carlos",
                            Telefono = "3225556677"
                        },
                        new
                        {
                            PacienteId = 3,
                            Apellidos = "Ramirez",
                            Direccion = "Av. 4 #9-56 Barrio San Martin",
                            Nombre = "Laura",
                            Telefono = "3117778899"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Pais", b =>
                {
                    b.Property<int>("PaisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("PaisId");

                    b.ToTable("pais", (string)null);

                    b.HasData(
                        new
                        {
                            PaisId = 1,
                            Nombre = "Colombia"
                        },
                        new
                        {
                            PaisId = 2,
                            Nombre = "Perú"
                        },
                        new
                        {
                            PaisId = 3,
                            Nombre = "Argentina"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Proveedor", b =>
                {
                    b.Property<int>("ProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ProveedorId");

                    b.ToTable("proveedor", (string)null);

                    b.HasData(
                        new
                        {
                            ProveedorId = 1,
                            Direccion = "Cra 19 # 839",
                            Email = "ProveedorA@gmail.com",
                            Nombre = "ProveedorA",
                            Telefono = "032238492"
                        },
                        new
                        {
                            ProveedorId = 2,
                            Direccion = "Cra 22 # 839",
                            Email = "ProveedorB@gmail.com",
                            Nombre = "ProveedorB",
                            Telefono = "032238493"
                        },
                        new
                        {
                            ProveedorId = 3,
                            Direccion = "Calle 14 # 839",
                            Email = "ProveedorC@gmail.com",
                            Nombre = "ProveedorC",
                            Telefono = "032238494"
                        });
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Revocado")
                        .HasColumnType("date");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("refresh_token", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Property<int>("RolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RolId");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("UsuarioId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RolId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Venta", b =>
                {
                    b.Property<int>("VentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("datetime");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<double>("Precio")
                        .HasColumnType("double");

                    b.HasKey("VentaId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("MedicamentoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("venta", (string)null);

                    b.HasData(
                        new
                        {
                            VentaId = 1,
                            Cantidad = 2,
                            EmpleadoId = 1,
                            FechaVenta = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicamentoId = 1,
                            PacienteId = 1,
                            Precio = 2200.0
                        },
                        new
                        {
                            VentaId = 2,
                            Cantidad = 3,
                            EmpleadoId = 2,
                            FechaVenta = new DateTime(2023, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicamentoId = 2,
                            PacienteId = 2,
                            Precio = 2700.0
                        },
                        new
                        {
                            VentaId = 3,
                            Cantidad = 1,
                            EmpleadoId = 3,
                            FechaVenta = new DateTime(2023, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicamentoId = 3,
                            PacienteId = 3,
                            Precio = 1500.0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.HasOne("Domain.Entities.Departamento", "Departamento")
                        .WithMany("Ciudades")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Domain.Entities.Compra", b =>
                {
                    b.HasOne("Domain.Entities.Medicamento", "Medicamento")
                        .WithMany("Compras")
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Proveedor", "Proveedor")
                        .WithMany("Compras")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.HasOne("Domain.Entities.Pais", "Pais")
                        .WithMany("Departamentos")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Domain.Entities.Empleado", b =>
                {
                    b.HasOne("Domain.Entities.Arl", "Arl")
                        .WithMany("Empleados")
                        .HasForeignKey("ArlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Cargo", "Cargo")
                        .WithMany("Empleados")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Ciudad", "Ciudad")
                        .WithMany("Empleados")
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Eps", "Eps")
                        .WithMany("Empleados")
                        .HasForeignKey("EpsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arl");

                    b.Navigation("Cargo");

                    b.Navigation("Ciudad");

                    b.Navigation("Eps");
                });

            modelBuilder.Entity("Domain.Entities.Medicamento", b =>
                {
                    b.HasOne("Domain.Entities.Proveedor", "Proveedor")
                        .WithMany("Medicamentos")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.HasOne("Domain.Entities.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Domain.Entities.Venta", b =>
                {
                    b.HasOne("Domain.Entities.Empleado", "Empleado")
                        .WithMany("Ventas")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Medicamento", "Medicamento")
                        .WithMany("Ventas")
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Paciente", "Paciente")
                        .WithMany("Ventas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Medicamento");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Domain.Entities.Arl", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Domain.Entities.Cargo", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Domain.Entities.Empleado", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Domain.Entities.Eps", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Domain.Entities.Medicamento", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Domain.Entities.Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Domain.Entities.Proveedor", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
