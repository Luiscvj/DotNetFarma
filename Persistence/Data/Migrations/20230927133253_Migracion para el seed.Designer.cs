// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(DotNetFarmaContext))]
    [Migration("20230927133253_Migracion para el seed")]
    partial class Migracionparaelseed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Arl", b =>
                {
                    b.Property<int>("ArlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ArlId");

                    b.ToTable("arl", (string)null);

                    b.HasData(
                        new
                        {
                            ArlId = 1,
                            Direccion = "Calle arl 456",
                            Email = "arl1@gmail.com",
                            Nombre = "Arl1",
                            Telefono = "4342443324"
                        },
                        new
                        {
                            ArlId = 2,
                            Direccion = "Calle arl 789",
                            Email = "arl2@gmail.com",
                            Nombre = "Arl2",
                            Telefono = "2342346563"
                        },
                        new
                        {
                            ArlId = 3,
                            Direccion = "Calle arl 123",
                            Email = "arl3@gmail.com",
                            Nombre = "Arl3",
                            Telefono = "2457324355"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cargo", b =>
                {
                    b.Property<int>("CargoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CargoId");

                    b.ToTable("Cargo", (string)null);

                    b.HasData(
                        new
                        {
                            CargoId = 1,
                            Descripcion = "... Gerente",
                            Nombre = "Gerente"
                        },
                        new
                        {
                            CargoId = 2,
                            Descripcion = "... Admin",
                            Nombre = "Administrador"
                        },
                        new
                        {
                            CargoId = 3,
                            Descripcion = "... Vendedor",
                            Nombre = "Vendedor"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.Property<int>("CiudadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CiudadId");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("ciudad", (string)null);

                    b.HasData(
                        new
                        {
                            CiudadId = 1,
                            DepartamentoId = 1,
                            Nombre = "Bucaramanga"
                        },
                        new
                        {
                            CiudadId = 2,
                            DepartamentoId = 1,
                            Nombre = "Piedecuesta"
                        },
                        new
                        {
                            CiudadId = 3,
                            DepartamentoId = 1,
                            Nombre = "Giron"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Compra", b =>
                {
                    b.Property<int>("CompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCompra")
                        .HasColumnType("date");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.HasKey("CompraId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Compra", (string)null);

                    b.HasData(
                        new
                        {
                            CompraId = 1,
                            FechaCompra = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProveedorId = 1
                        },
                        new
                        {
                            CompraId = 2,
                            FechaCompra = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProveedorId = 2
                        },
                        new
                        {
                            CompraId = 3,
                            FechaCompra = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProveedorId = 3
                        },
                        new
                        {
                            CompraId = 4,
                            FechaCompra = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProveedorId = 1
                        },
                        new
                        {
                            CompraId = 5,
                            FechaCompra = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProveedorId = 2
                        },
                        new
                        {
                            CompraId = 6,
                            FechaCompra = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProveedorId = 3
                        },
                        new
                        {
                            CompraId = 7,
                            FechaCompra = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProveedorId = 1
                        },
                        new
                        {
                            CompraId = 8,
                            FechaCompra = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProveedorId = 2
                        },
                        new
                        {
                            CompraId = 9,
                            FechaCompra = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProveedorId = 3
                        },
                        new
                        {
                            CompraId = 10,
                            FechaCompra = new DateTime(2023, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProveedorId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("DepartamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.HasKey("DepartamentoId");

                    b.HasIndex("PaisId");

                    b.ToTable("departamento", (string)null);

                    b.HasData(
                        new
                        {
                            DepartamentoId = 1,
                            Nombre = "Santander",
                            PaisId = 1
                        },
                        new
                        {
                            DepartamentoId = 2,
                            Nombre = "Buenos Aires",
                            PaisId = 2
                        },
                        new
                        {
                            DepartamentoId = 3,
                            Nombre = "Ciudad Mexico",
                            PaisId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Empleado", b =>
                {
                    b.Property<int>("EmpleadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ArlId")
                        .HasColumnType("int");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<int>("CiudadId")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("EpsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaContratacion")
                        .HasColumnType("date");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("EmpleadoId");

                    b.HasIndex("ArlId");

                    b.HasIndex("CargoId");

                    b.HasIndex("CiudadId");

                    b.HasIndex("EpsId");

                    b.ToTable("empleado", (string)null);

                    b.HasData(
                        new
                        {
                            EmpleadoId = 1,
                            Apellidos = "Perez",
                            ArlId = 1,
                            CargoId = 3,
                            CiudadId = 1,
                            Direccion = "Calle 123",
                            EpsId = 1,
                            FechaContratacion = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombres = "Pedro",
                            Telefono = "555-1234"
                        },
                        new
                        {
                            EmpleadoId = 2,
                            Apellidos = "Villamizar",
                            ArlId = 2,
                            CargoId = 3,
                            CiudadId = 1,
                            Direccion = "Calle 123",
                            EpsId = 2,
                            FechaContratacion = new DateTime(2019, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombres = "Ana",
                            Telefono = "555-1234"
                        },
                        new
                        {
                            EmpleadoId = 3,
                            Apellidos = "Garcia",
                            ArlId = 3,
                            CargoId = 1,
                            CiudadId = 1,
                            Direccion = "Calle 123",
                            EpsId = 3,
                            FechaContratacion = new DateTime(2018, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombres = "Luis",
                            Telefono = "555-1234"
                        },
                        new
                        {
                            EmpleadoId = 4,
                            Apellidos = "Garcia",
                            ArlId = 1,
                            CargoId = 2,
                            CiudadId = 1,
                            Direccion = "Calle 123",
                            EpsId = 3,
                            FechaContratacion = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombres = "Sofia",
                            Telefono = "555-1234"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Eps", b =>
                {
                    b.Property<int>("EpsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("EpsId");

                    b.ToTable("eps", (string)null);

                    b.HasData(
                        new
                        {
                            EpsId = 1,
                            Direccion = "Calle Eps 456",
                            Email = "eps1@gmail.com",
                            Nombre = "Eps1",
                            Telefono = "4342443324"
                        },
                        new
                        {
                            EpsId = 2,
                            Direccion = "Calle Eps 789",
                            Email = "eps2@gmail.com",
                            Nombre = "Eps2",
                            Telefono = "2342346563"
                        },
                        new
                        {
                            EpsId = 3,
                            Direccion = "Calle Eps 123",
                            Email = "eps3@gmail.com",
                            Nombre = "Eps3",
                            Telefono = "2457324355"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Medicamento", b =>
                {
                    b.Property<int>("MedicamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<double>("Precio")
                        .HasColumnType("double");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("MedicamentoId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("medicamento", (string)null);

                    b.HasData(
                        new
                        {
                            MedicamentoId = 1,
                            FechaExpiracion = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Paracetamol",
                            Precio = 20.0,
                            ProveedorId = 1,
                            Stock = 150
                        },
                        new
                        {
                            MedicamentoId = 2,
                            FechaExpiracion = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Ibuprofeno",
                            Precio = 25.0,
                            ProveedorId = 2,
                            Stock = 50
                        },
                        new
                        {
                            MedicamentoId = 3,
                            FechaExpiracion = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Aspirina",
                            Precio = 15.0,
                            ProveedorId = 3,
                            Stock = 30
                        },
                        new
                        {
                            MedicamentoId = 4,
                            FechaExpiracion = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Amoxicilina",
                            Precio = 40.0,
                            ProveedorId = 1,
                            Stock = 75
                        },
                        new
                        {
                            MedicamentoId = 5,
                            FechaExpiracion = new DateTime(2024, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Cetirizina",
                            Precio = 10.0,
                            ProveedorId = 2,
                            Stock = 110
                        },
                        new
                        {
                            MedicamentoId = 6,
                            FechaExpiracion = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Losartan",
                            Precio = 55.0,
                            ProveedorId = 3,
                            Stock = 95
                        },
                        new
                        {
                            MedicamentoId = 7,
                            FechaExpiracion = new DateTime(2024, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Metformina",
                            Precio = 60.0,
                            ProveedorId = 1,
                            Stock = 180
                        },
                        new
                        {
                            MedicamentoId = 8,
                            FechaExpiracion = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Atorvastatina",
                            Precio = 45.0,
                            ProveedorId = 2,
                            Stock = 200
                        },
                        new
                        {
                            MedicamentoId = 9,
                            FechaExpiracion = new DateTime(2024, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Clonazepam",
                            Precio = 35.0,
                            ProveedorId = 3,
                            Stock = 25
                        },
                        new
                        {
                            MedicamentoId = 10,
                            FechaExpiracion = new DateTime(2025, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Loratadina",
                            Precio = 22.0,
                            ProveedorId = 1,
                            Stock = 120
                        });
                });

            modelBuilder.Entity("Domain.Entities.MedicamentoCompra", b =>
                {
                    b.Property<int>("MedicamentoCompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CantidadComprada")
                        .HasColumnType("int");

                    b.Property<int>("CompraId")
                        .HasColumnType("int");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioCompra")
                        .HasPrecision(10, 5)
                        .HasColumnType("decimal(10,5)");

                    b.HasKey("MedicamentoCompraId");

                    b.HasIndex("CompraId");

                    b.HasIndex("MedicamentoId");

                    b.ToTable("medicamento_compra", (string)null);

                    b.HasData(
                        new
                        {
                            MedicamentoCompraId = 1,
                            CantidadComprada = 50,
                            CompraId = 1,
                            MedicamentoId = 1,
                            PrecioCompra = 15m
                        },
                        new
                        {
                            MedicamentoCompraId = 2,
                            CantidadComprada = 25,
                            CompraId = 2,
                            MedicamentoId = 2,
                            PrecioCompra = 20m
                        },
                        new
                        {
                            MedicamentoCompraId = 3,
                            CantidadComprada = 10,
                            CompraId = 3,
                            MedicamentoId = 3,
                            PrecioCompra = 12m
                        },
                        new
                        {
                            MedicamentoCompraId = 4,
                            CantidadComprada = 30,
                            CompraId = 4,
                            MedicamentoId = 4,
                            PrecioCompra = 35m
                        },
                        new
                        {
                            MedicamentoCompraId = 5,
                            CantidadComprada = 50,
                            CompraId = 5,
                            MedicamentoId = 5,
                            PrecioCompra = 8m
                        },
                        new
                        {
                            MedicamentoCompraId = 6,
                            CantidadComprada = 40,
                            CompraId = 6,
                            MedicamentoId = 6,
                            PrecioCompra = 50m
                        },
                        new
                        {
                            MedicamentoCompraId = 7,
                            CantidadComprada = 60,
                            CompraId = 7,
                            MedicamentoId = 7,
                            PrecioCompra = 55m
                        },
                        new
                        {
                            MedicamentoCompraId = 8,
                            CantidadComprada = 70,
                            CompraId = 8,
                            MedicamentoId = 8,
                            PrecioCompra = 40m
                        },
                        new
                        {
                            MedicamentoCompraId = 9,
                            CantidadComprada = 15,
                            CompraId = 9,
                            MedicamentoId = 9,
                            PrecioCompra = 32m
                        },
                        new
                        {
                            MedicamentoCompraId = 10,
                            CantidadComprada = 50,
                            CompraId = 10,
                            MedicamentoId = 10,
                            PrecioCompra = 20m
                        });
                });

            modelBuilder.Entity("Domain.Entities.MedicamentoVenta", b =>
                {
                    b.Property<int>("MedicamentoVentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CantidadVendida")
                        .HasColumnType("int");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioVenta")
                        .HasPrecision(10, 5)
                        .HasColumnType("decimal(10,5)");

                    b.Property<int>("VentaId")
                        .HasColumnType("int");

                    b.HasKey("MedicamentoVentaId");

                    b.HasIndex("MedicamentoId");

                    b.HasIndex("VentaId");

                    b.ToTable("medicamento_venta", (string)null);

                    b.HasData(
                        new
                        {
                            MedicamentoVentaId = 1,
                            CantidadVendida = 2,
                            MedicamentoId = 1,
                            PrecioVenta = 20m,
                            VentaId = 1
                        },
                        new
                        {
                            MedicamentoVentaId = 2,
                            CantidadVendida = 1,
                            MedicamentoId = 2,
                            PrecioVenta = 25m,
                            VentaId = 2
                        },
                        new
                        {
                            MedicamentoVentaId = 3,
                            CantidadVendida = 2,
                            MedicamentoId = 3,
                            PrecioVenta = 15m,
                            VentaId = 2
                        },
                        new
                        {
                            MedicamentoVentaId = 4,
                            CantidadVendida = 1,
                            MedicamentoId = 4,
                            PrecioVenta = 40m,
                            VentaId = 3
                        },
                        new
                        {
                            MedicamentoVentaId = 5,
                            CantidadVendida = 1,
                            MedicamentoId = 5,
                            PrecioVenta = 10m,
                            VentaId = 4
                        },
                        new
                        {
                            MedicamentoVentaId = 6,
                            CantidadVendida = 1,
                            MedicamentoId = 6,
                            PrecioVenta = 55m,
                            VentaId = 5
                        },
                        new
                        {
                            MedicamentoVentaId = 7,
                            CantidadVendida = 1,
                            MedicamentoId = 7,
                            PrecioVenta = 60m,
                            VentaId = 6
                        },
                        new
                        {
                            MedicamentoVentaId = 8,
                            CantidadVendida = 1,
                            MedicamentoId = 8,
                            PrecioVenta = 45m,
                            VentaId = 7
                        },
                        new
                        {
                            MedicamentoVentaId = 9,
                            CantidadVendida = 1,
                            MedicamentoId = 9,
                            PrecioVenta = 35m,
                            VentaId = 8
                        },
                        new
                        {
                            MedicamentoVentaId = 10,
                            CantidadVendida = 1,
                            MedicamentoId = 10,
                            PrecioVenta = 22m,
                            VentaId = 9
                        },
                        new
                        {
                            MedicamentoVentaId = 11,
                            CantidadVendida = 2,
                            MedicamentoId = 1,
                            PrecioVenta = 20m,
                            VentaId = 10
                        });
                });

            modelBuilder.Entity("Domain.Entities.Paciente", b =>
                {
                    b.Property<int>("PacienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("PacienteId");

                    b.ToTable("paciente", (string)null);

                    b.HasData(
                        new
                        {
                            PacienteId = 1,
                            Apellidos = "Perez",
                            Direccion = "Calle 123",
                            Nombre = "Juan",
                            Telefono = "555-1234"
                        },
                        new
                        {
                            PacienteId = 2,
                            Apellidos = "Villamizar",
                            Direccion = "Calle 456",
                            Nombre = "Maria",
                            Telefono = "555-5678"
                        },
                        new
                        {
                            PacienteId = 3,
                            Apellidos = "Garcia",
                            Direccion = "Calle 789",
                            Nombre = "Luis",
                            Telefono = "555-9012"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Pais", b =>
                {
                    b.Property<int>("PaisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PaisId");

                    b.ToTable("pais", (string)null);

                    b.HasData(
                        new
                        {
                            PaisId = 1,
                            Nombre = "Colombia"
                        },
                        new
                        {
                            PaisId = 2,
                            Nombre = "Argentina"
                        },
                        new
                        {
                            PaisId = 3,
                            Nombre = "Mexico"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Proveedor", b =>
                {
                    b.Property<int>("ProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ProveedorId");

                    b.ToTable("proveedor", (string)null);

                    b.HasData(
                        new
                        {
                            ProveedorId = 1,
                            Direccion = "Calle Proveedor 456",
                            Email = "contacto@proveedora.com",
                            Nombre = "ProveedorA",
                            Telefono = "32335232"
                        },
                        new
                        {
                            ProveedorId = 2,
                            Direccion = "Calle Proveedor 789",
                            Email = "contacto@proveedorb.com",
                            Nombre = "ProveedorB",
                            Telefono = "67835424"
                        },
                        new
                        {
                            ProveedorId = 3,
                            Direccion = "Calle Proveedor 123",
                            Email = "contacto@proveedorc.com",
                            Nombre = "ProveedorC",
                            Telefono = "34578724"
                        });
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("refresh_token", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Property<int>("RolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RolId");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("UsuarioId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UsuarioRoles", b =>
                {
                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("RolId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioRoles");
                });

            modelBuilder.Entity("Domain.Entities.Venta", b =>
                {
                    b.Property<int>("VentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("datetime");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.HasKey("VentaId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("venta", (string)null);

                    b.HasData(
                        new
                        {
                            VentaId = 1,
                            EmpleadoId = 1,
                            FechaVenta = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PacienteId = 1
                        },
                        new
                        {
                            VentaId = 2,
                            EmpleadoId = 2,
                            FechaVenta = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PacienteId = 2
                        },
                        new
                        {
                            VentaId = 3,
                            EmpleadoId = 1,
                            FechaVenta = new DateTime(2023, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PacienteId = 3
                        },
                        new
                        {
                            VentaId = 4,
                            EmpleadoId = 1,
                            FechaVenta = new DateTime(2023, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PacienteId = 2
                        },
                        new
                        {
                            VentaId = 5,
                            EmpleadoId = 2,
                            FechaVenta = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PacienteId = 1
                        },
                        new
                        {
                            VentaId = 6,
                            EmpleadoId = 2,
                            FechaVenta = new DateTime(2023, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PacienteId = 2
                        },
                        new
                        {
                            VentaId = 7,
                            EmpleadoId = 1,
                            FechaVenta = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PacienteId = 2
                        },
                        new
                        {
                            VentaId = 8,
                            EmpleadoId = 1,
                            FechaVenta = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PacienteId = 2
                        },
                        new
                        {
                            VentaId = 9,
                            EmpleadoId = 2,
                            FechaVenta = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PacienteId = 1
                        },
                        new
                        {
                            VentaId = 10,
                            EmpleadoId = 2,
                            FechaVenta = new DateTime(2023, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PacienteId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.HasOne("Domain.Entities.Departamento", "Departamento")
                        .WithMany("Ciudades")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Domain.Entities.Compra", b =>
                {
                    b.HasOne("Domain.Entities.Proveedor", "Proveedor")
                        .WithMany("Compras")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.HasOne("Domain.Entities.Pais", "Pais")
                        .WithMany("Departamentos")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Domain.Entities.Empleado", b =>
                {
                    b.HasOne("Domain.Entities.Arl", "Arl")
                        .WithMany("Empleados")
                        .HasForeignKey("ArlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Cargo", "Cargo")
                        .WithMany("Empleados")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Ciudad", "Ciudad")
                        .WithMany("Empleados")
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Eps", "Eps")
                        .WithMany("Empleados")
                        .HasForeignKey("EpsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arl");

                    b.Navigation("Cargo");

                    b.Navigation("Ciudad");

                    b.Navigation("Eps");
                });

            modelBuilder.Entity("Domain.Entities.Medicamento", b =>
                {
                    b.HasOne("Domain.Entities.Proveedor", "Proveedor")
                        .WithMany("Medicamentos")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Domain.Entities.MedicamentoCompra", b =>
                {
                    b.HasOne("Domain.Entities.Compra", "Compra")
                        .WithMany("MedicamentoCompras")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Medicamento", "Medicamento")
                        .WithMany("MedicamentoCompras")
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compra");

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("Domain.Entities.MedicamentoVenta", b =>
                {
                    b.HasOne("Domain.Entities.Medicamento", "Medicamento")
                        .WithMany("MedicamentoVentas")
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Venta", "Venta")
                        .WithMany("MedicamentoVentas")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.UsuarioRoles", b =>
                {
                    b.HasOne("Domain.Entities.Rol", "Rol")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Venta", b =>
                {
                    b.HasOne("Domain.Entities.Empleado", "Empleado")
                        .WithMany("Ventas")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Paciente", "Paciente")
                        .WithMany("Ventas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Domain.Entities.Arl", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Domain.Entities.Cargo", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Domain.Entities.Compra", b =>
                {
                    b.Navigation("MedicamentoCompras");
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Domain.Entities.Empleado", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Domain.Entities.Eps", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Domain.Entities.Medicamento", b =>
                {
                    b.Navigation("MedicamentoCompras");

                    b.Navigation("MedicamentoVentas");
                });

            modelBuilder.Entity("Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Domain.Entities.Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Domain.Entities.Proveedor", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Navigation("UsuarioRoles");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UsuarioRoles");
                });

            modelBuilder.Entity("Domain.Entities.Venta", b =>
                {
                    b.Navigation("MedicamentoVentas");
                });
#pragma warning restore 612, 618
        }
    }
}
